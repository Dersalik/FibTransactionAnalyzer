@using System.Globalization
@model TransactionAnalyzer.Models.TransactionAnalysisResult
@using Transaction
@{
    ViewData["Title"] = "Transaction Analysis Results";
}

<!-- This view serves as the main dashboard displaying comprehensive transaction analysis.
     It's organized into sections for each currency, with charts and statistics for each analysis type. -->

<div class="container-fluid py-4">
    <!-- Header Section with Overall Statistics -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="display-4 fw-bold mb-0">Analysis Results</h1>
                    <p class="text-muted mb-0">Generated on @Model.AnalysisDate.ToString("MMMM dd, yyyy 'at' HH:mm")</p>
                </div>
                <a asp-controller="Analysis" asp-action="Index" class="btn btn-outline-primary">
                    <i class="fas fa-upload me-2"></i>Analyze New File
                </a>
            </div>

            <!-- Overall Statistics Cards -->
            <div class="row g-3 mb-4">
                <div class="col-md-3">
                    <div class="card stat-card border-0 shadow-sm">
                        <div class="card-body text-center">
                            <i class="fas fa-file-alt text-primary fs-1 mb-2"></i>
                            <h4 class="fw-bold">@Model.TotalTransactionCount</h4>
                            <p class="text-muted mb-0">Total Transactions</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card stat-card border-0 shadow-sm">
                        <div class="card-body text-center">
                            <i class="fas fa-filter text-success fs-1 mb-2"></i>
                            <h4 class="fw-bold">@Model.FilteredTransactionCount</h4>
                            <p class="text-muted mb-0">Analyzed Transactions</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card stat-card border-0 shadow-sm">
                        <div class="card-body text-center">
                            <i class="fas fa-coins text-warning fs-1 mb-2"></i>
                            <h4 class="fw-bold">@Model.CurrencyAnalyses.Count</h4>
                            <p class="text-muted mb-0">Currencies</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card stat-card border-0 shadow-sm">
                        <div class="card-body text-center">
                            <i class="fas fa-ban text-danger fs-1 mb-2"></i>
                            <h4 class="fw-bold">@(Model.TotalTransactionCount - Model.FilteredTransactionCount)</h4>
                            <p class="text-muted mb-0">Filtered Out</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Currency-specific Analysis Sections -->
    <!-- This loop creates a complete analysis dashboard for each currency found in the data -->
    @foreach (var currencyAnalysis in Model.CurrencyAnalyses)
    {
        var currency = currencyAnalysis.Key;
        var analysis = currencyAnalysis.Value;
        var currencySymbol = currency.ToString();
        var currencyCulture = new CultureInfo(currency.GetCultureCode());

        <div class="currency-section mb-5">
            <div class="row mb-4">
                <div class="col-12">
                    <h2 class="fw-bold text-primary mb-3">
                        <i class="fas fa-money-bill-wave me-2"></i>
                        @currency Analysis
                    </h2>
                </div>
            </div>

            <!-- Financial Overview Cards for this Currency -->
            <div class="row g-3 mb-4">
                <div class="col-lg-3 col-md-6">
                    <div class="card metric-card border-0 shadow-sm h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h6 class="text-muted mb-1">Total Inflow</h6>
                                    <h4 class="fw-bold text-success">@analysis.TotalInflow.ToString("C", currencyCulture)</h4>
                                </div>
                                <i class="fas fa-arrow-up text-success fs-2"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6">
                    <div class="card metric-card border-0 shadow-sm h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h6 class="text-muted mb-1">Total Outflow</h6>
                                    <h4 class="fw-bold text-danger">@analysis.TotalOutflow.ToString("C", currencyCulture)</h4>
                                </div>
                                <i class="fas fa-arrow-down text-danger fs-2"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6">
                    <div class="card metric-card border-0 shadow-sm h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h6 class="text-muted mb-1">Net Amount</h6>
                                    <h4 class="fw-bold @(analysis.NetAmount >= 0 ? "text-success" : "text-danger")">
                                        @analysis.NetAmount.ToString("C", currencyCulture)
                                    </h4>
                                </div>
                                <i class="fas @(analysis.NetAmount >= 0 ? "fa-plus" : "fa-minus") @(analysis.NetAmount >= 0 ? "text-success" : "text-danger") fs-2"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6">
                    <div class="card metric-card border-0 shadow-sm h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h6 class="text-muted mb-1">Total Fees</h6>
                                    <h4 class="fw-bold text-warning">@analysis.TotalFees.ToString("C", currencyCulture)</h4>
                                </div>
                                <i class="fas fa-receipt text-warning fs-2"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Charts Row - This contains the main visualizations for financial analysis -->
            <div class="row g-4 mb-4">
                <!-- Account Balance Tracking Chart -->
                <div class="col-lg-6">
                    <div class="card chart-card border-0 shadow-sm h-100">
                        <div class="card-header bg-white border-0 pb-0">
                            <h5 class="fw-bold mb-0">Account Balance Tracking</h5>
                            <p class="text-muted small mb-0">Balance changes over time</p>
                        </div>
                        <div class="card-body">
                            <canvas id="balanceChart_@currency" height="300"></canvas>
                        </div>
                    </div>
                </div>

                <!-- Monthly Cash Flow Analysis Chart -->
                <div class="col-lg-6">
                    <div class="card chart-card border-0 shadow-sm h-100">
                        <div class="card-header bg-white border-0 pb-0">
                            <h5 class="fw-bold mb-0">Monthly Cash Flow</h5>
                            <p class="text-muted small mb-0">Income vs Expenses by month</p>
                        </div>
                        <div class="card-body">
                            <canvas id="cashFlowChart_@currency" height="300"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row g-4 mb-4">
                <!-- Transaction Types Analysis -->
                <div class="col-lg-6">
                    <div class="card chart-card border-0 shadow-sm h-100">
                        <div class="card-header bg-white border-0 pb-0">
                            <h5 class="fw-bold mb-0">Transaction Types</h5>
                            <p class="text-muted small mb-0">Distribution by transaction type</p>
                        </div>
                        <div class="card-body">
                            <canvas id="transactionTypesChart_@currency" height="300"></canvas>
                        </div>
                    </div>
                </div>

                <!-- Yearly Analysis Chart -->
                <div class="col-lg-6">
                    <div class="card chart-card border-0 shadow-sm h-100">
                        <div class="card-header bg-white border-0 pb-0">
                            <h5 class="fw-bold mb-0">Yearly Analysis</h5>
                            <p class="text-muted small mb-0">Income and expenses by year</p>
                        </div>
                        <div class="card-body">
                            <canvas id="yearlyChart_@currency" height="300"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Data Tables Section -->
            <div class="row g-4 mb-4">
                <!-- Transaction Type Details -->
                <div class="col-lg-6">
                    <div class="card table-card border-0 shadow-sm">
                        <div class="card-header bg-white border-0">
                            <h5 class="fw-bold mb-0">Transaction Type Analysis</h5>
                        </div>
                        <div class="card-body p-0">
                            <div class="table-responsive">
                                <table class="table table-hover mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Type</th>
                                            <th>Count</th>
                                            <th>Average</th>
                                            <th>Largest</th>
                                            <th>Total</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var typeAnalysis in analysis.TransactionTypeAnalyses)
                                        {
                                            <tr>
                                                <td>@typeAnalysis.TransactionType.Replace("_", " ")</td>
                                                <td><span class="badge bg-primary">@typeAnalysis.Count</span></td>
                                                <td>@typeAnalysis.AverageAmount.ToString("C", currencyCulture)</td>
                                                <td>@typeAnalysis.LargestAmount.ToString("C", currencyCulture)</td>
                                                <td>@typeAnalysis.TotalAmount.ToString("C", currencyCulture)</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Top Counterparties -->
                <div class="col-lg-6">
                    <div class="card table-card border-0 shadow-sm">
                        <div class="card-header bg-white border-0">
                            <h5 class="fw-bold mb-0">Top Counterparties</h5>
                        </div>
                        <div class="card-body p-0">
                            <div class="table-responsive">
                                <table class="table table-hover mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Counterparty</th>
                                            <th>Transactions</th>
                                            <th>Total Amount</th>
                                            <th>Average</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var counterparty in analysis.TopCounterparties.Take(13))
                                        {
                                            <tr>
                                                <td>@counterparty.Counterparty</td>
                                                <td><span class="badge bg-info">@counterparty.TransactionCount</span></td>
                                                <td>@counterparty.TotalAmount.ToString("C", currencyCulture)</td>
                                                <td>@counterparty.AverageAmount.ToString("C", currencyCulture)</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- NEW ANALYSIS SECTIONS -->
            <!-- 1. Largest Transactions By Type -->
            @if (analysis.LargestTransactionsByType.Any())
            {
                <div class="row g-4 mb-4">
                    <div class="col-12">
                        <div class="card table-card border-0 shadow-sm">
                            <div class="card-header bg-white border-0">
                                <h5 class="fw-bold mb-0">
                                    <i class="fas fa-star text-warning me-2"></i>
                                    Largest Transactions By Type
                                </h5>
                                <p class="text-muted small mb-0">The biggest transaction in each category</p>
                            </div>
                            <div class="card-body p-0">
                                <div class="table-responsive">
                                    <table class="table table-hover mb-0">
                                        <thead class="table-light">
                                            <tr>
                                                <th>Transaction Type</th>
                                                <th>Amount</th>
                                                <th>Counterparty</th>
                                                <th>Date</th>
                                                <th>Status</th>
                                                <th>Note</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var largestType in analysis.LargestTransactionsByType)
                                            {
                                                <tr>
                                                    <td>
                                                        <span class="badge bg-secondary">@largestType.TransactionType.Replace("_", " ")</span>
                                                    </td>
                                                    <td>
                                                        <strong class="@(largestType.LargestAmount >= 0 ? "text-success" : "text-danger")">
                                                            @largestType.LargestAmount.ToString("C", currencyCulture)
                                                        </strong>
                                                    </td>
                                                    @if (largestType.LargestTransaction != null)
                                                    {
                                                        <td>@(string.IsNullOrEmpty(largestType.LargestTransaction.Counterparty) ? "-" : largestType.LargestTransaction.Counterparty)</td>
                                                        <td>@largestType.LargestTransaction.Date.ToString("MMM dd, yyyy")</td>
                                                        <td>
                                                            <span class="badge @(largestType.LargestTransaction.Status == "COMPLETED" ? "bg-success" : "bg-warning")">
                                                                @largestType.LargestTransaction.Status
                                                            </span>
                                                        </td>
                                                        <td>
                                                            <small class="text-muted">
                                                                @(string.IsNullOrEmpty(largestType.LargestTransaction.Note) ? "-" :
                                                                                                                (largestType.LargestTransaction.Note.Length > 30 ?
                                                                                                                largestType.LargestTransaction.Note.Substring(0, 30) + "..." :
                                                                                                                largestType.LargestTransaction.Note))
                                            </small>
                                        </td>
                                                                                }
                                                    else
                                                    {
                                                        <td colspan="4" class="text-muted">Transaction details not available</td>
                                                    }
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <!-- 2. Counterparties By Transaction Type -->
            @if (analysis.CounterpartiesByTransactionType.Any())
            {
                <div class="row g-4 mb-4">
                    <div class="col-12">
                        <div class="card table-card border-0 shadow-sm">
                            <div class="card-header bg-white border-0">
                                <h5 class="fw-bold mb-0">
                                    <i class="fas fa-network-wired text-info me-2"></i>
                                    Counterparties by Transaction Type
                                </h5>
                                <p class="text-muted small mb-0">Transaction patterns between you and counterparties</p>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    @foreach (var typeGroup in analysis.CounterpartiesByTransactionType)
                                    {
                                        <div class="col-lg-6 mb-4">
                                            <div class="border rounded p-3 bg-light">
                                                <h6 class="fw-bold text-primary mb-3">
                                                    <i class="fas fa-tag me-1"></i>
                                                    @typeGroup.Key.Replace("_", " ")
                                                </h6>
                                                <div class="table-responsive">
                                                    <table class="table table-sm table-borderless mb-0">
                                                        <thead>
                                                            <tr class="border-bottom">
                                                                <th class="small">Counterparty</th>
                                                                <th class="small text-center">Count</th>
                                                                <th class="small text-end">Total</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @foreach (var counterparty in typeGroup.Value)
                                                            {
                                                                <tr>
                                                                    <td class="small">
                                                                        @(counterparty.Counterparty)
                                                    </td>
                                                    <td class="small text-center">
                                                        <span class="badge bg-info badge-sm">@counterparty.Count</span>
                                                    </td>
                                                    <td class="small text-end">
                                                        @counterparty.TotalAmount.ToString("C0", currencyCulture)
                                                    </td>
                                                </tr>
                                                                                                }
                                                        </tbody>
                                                    </table>
                                                </div>
                                                @if (typeGroup.Value.Count > 5000)
                                                {
                                                    <small class="text-muted">... and @(typeGroup.Value.Count - 5) more</small>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <!-- 3. Individual Largest Transactions with Full Details -->
            @if (analysis.TransactionTypeAnalyses.Any(t => t.LargestTransaction != null))
            {
                <div class="row g-4 mb-4">
                    <div class="col-12">
                        <div class="card table-card border-0 shadow-sm">
                            <div class="card-header bg-white border-0">
                                <h5 class="fw-bold mb-0">
                                    <i class="fas fa-medal text-gold me-2"></i>
                                    Significant Transaction Details
                                </h5>
                                <p class="text-muted small mb-0">Complete information about your largest transactions</p>
                            </div>
                            <div class="card-body p-0">
                                <div class="row g-0">
                                    @foreach (var typeAnalysis in analysis.TransactionTypeAnalyses.Where(t => t.LargestTransaction != null))
                                    {
                                        var transaction = typeAnalysis.LargestTransaction!;
                                        <div class="col-lg-6 p-0">
                                            <div class="border-end border-bottom p-4">
                                                <div class="d-flex justify-content-between align-items-start mb-3">
                                                    <div>
                                                        <h6 class="fw-bold mb-1">@typeAnalysis.TransactionType.Replace("_", " ")</h6>
                                                        <span class="badge @(transaction.Status == "COMPLETED" ? "bg-success" : "bg-warning")">
                                                            @transaction.Status
                                                        </span>
                                                    </div>
                                                    <div class="text-end">
                                                        <div class="h5 fw-bold mb-0 @(transaction.Amount.Amount >= 0 ? "text-success" : "text-danger")">
                                                            @transaction.Amount.Amount.ToString("C", currencyCulture)
                                                        </div>
                                                        @if (transaction.Fee.Amount > 0)
                                                        {
                                                            <small class="text-muted">Fee: @transaction.Fee.Amount.ToString("C", currencyCulture)</small>
                                                        }
                                                    </div>
                                                </div>

                                                <div class="row g-2 small">
                                                    <div class="col-6">
                                                        <strong>Date:</strong><br>
                                                        <span class="text-muted">@transaction.Date.ToString("MMM dd, yyyy")</span>
                                                    </div>
                                                    <div class="col-6">
                                                        <strong>Time:</strong><br>
                                                        <span class="text-muted">@transaction.Time.ToString(@"hh\:mm")</span>
                                                    </div>
                                                    @if (!string.IsNullOrEmpty(transaction.Counterparty))
                                                    {
                                                        <div class="col-12 mt-2">
                                                            <strong>Counterparty:</strong><br>
                                                            <span class="text-muted">@transaction.Counterparty</span>
                                                        </div>
                                                    }
                                                    @if (!string.IsNullOrEmpty(transaction.TransactionId))
                                                    {
                                                        <div class="col-12 mt-2">
                                                            <strong>Transaction ID:</strong><br>
                                                            <code class="small">@transaction.TransactionId</code>
                                                        </div>
                                                    }
                                                    @if (!string.IsNullOrEmpty(transaction.Note))
                                                    {
                                                        <div class="col-12 mt-2">
                                                            <strong>Note:</strong><br>
                                                            <span class="text-muted">@transaction.Note</span>
                                                        </div>
                                                    }
                                                    <div class="col-12 mt-2">
                                                        <strong>Balance After:</strong><br>
                                                        <span class="text-info">@transaction.BalanceAfter.Amount.ToString("C", currencyCulture)</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <!-- Statistics Summary -->
            @if (analysis.MonthlyAnalyses.Any())
            {
                <div class="row g-4 mb-5">
                    <div class="col-12">
                        <div class="card border-0 shadow-sm">
                            <div class="card-header bg-white border-0">
                                <h5 class="fw-bold mb-0">Income Statistics</h5>
                            </div>
                            <div class="card-body">
                                <div class="row text-center">
                                    <div class="col-md-3">
                                        <h6 class="text-muted">Average Monthly</h6>
                                        <h4 class="fw-bold text-primary">@analysis.AverageMonthlyIncome.ToString("C", currencyCulture)</h4>
                                    </div>
                                    <div class="col-md-3">
                                        <h6 class="text-muted">Highest Month</h6>
                                        <h4 class="fw-bold text-success">@analysis.MaxMonthlyIncome.ToString("C", currencyCulture)</h4>
                                        @if (analysis.BestIncomeMonth != null)
                                        {
                                            <small class="text-muted">@analysis.BestIncomeMonth.MonthName</small>
                                        }
                                    </div>
                                    <div class="col-md-3">
                                        <h6 class="text-muted">Lowest Month</h6>
                                        <h4 class="fw-bold text-warning">@analysis.MinMonthlyIncome.ToString("C", currencyCulture)</h4>
                                        @if (analysis.WorstIncomeMonth != null)
                                        {
                                            <small class="text-muted">@analysis.WorstIncomeMonth.MonthName</small>
                                        }
                                    </div>
                                    <div class="col-md-3">
                                        <h6 class="text-muted">Total Months</h6>
                                        <h4 class="fw-bold text-info">@analysis.MonthlyAnalyses.Count</h4>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Chart.js Library and Custom Scripts -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    // This script section creates all the interactive charts for the financial analysis
    // Each chart is designed to provide specific insights into transaction patterns

    document.addEventListener('DOMContentLoaded', function() {
        // Configure Chart.js defaults for consistent styling
        Chart.defaults.font.family = 'system-ui, -apple-system, "Segoe UI", Roboto, sans-serif';
        Chart.defaults.color = '#6c757d';
        Chart.defaults.backgroundColor = 'rgba(13, 110, 253, 0.1)';
        Chart.defaults.borderColor = 'rgba(13, 110, 253, 0.8)';

        @foreach (var currencyAnalysis in Model.CurrencyAnalyses)
        {
                    var currency = currencyAnalysis.Key;
                    var analysis = currencyAnalysis.Value;

                    <text>
                    // Balance Tracking Chart - Shows how account balance changes over time
                    // This is crucial for understanding financial health trends
                    if (document.getElementById('balanceChart_@currency')) {
                        const balanceCtx = document.getElementById('balanceChart_@currency').getContext('2d');
                        new Chart(balanceCtx, {
                            type: 'line',
                            data: {
                                labels: [@Html.Raw(string.Join(",", analysis.BalanceHistory.Select(b => $"'{b.FormattedDate}'")))],
                                datasets: [{
                                    label: 'Account Balance',
                                    data: [@Html.Raw(string.Join(",", analysis.BalanceHistory.Select(b => b.Balance.ToString("F2"))))],
                                    borderColor: 'rgb(13, 110, 253)',
                                    backgroundColor: 'rgba(13, 110, 253, 0.1)',
                                    borderWidth: 3,
                                    fill: true,
                                    tension: 0.4,
                                    pointBackgroundColor: 'rgb(13, 110, 253)',
                                    pointBorderColor: 'white',
                                    pointBorderWidth: 2,
                                    pointRadius: 6
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: {
                                    legend: {
                                        display: false
                                    }
                                },
                                scales: {
                                    y: {
                                        beginAtZero: false,
                                        grid: {
                                            color: 'rgba(0,0,0,0.1)'
                                        },
                                        ticks: {
                                            callback: function(value) {
                                                return new Intl.NumberFormat('en-US', {
                                                    style: 'currency',
                                                    currency: '@currency'
                                                }).format(value);
                                            }
                                        }
                                    },
                                    x: {
                                        grid: {
                                            display: false
                                        }
                                    }
                                }
                            }
                        });
                    }

                    // Monthly Cash Flow Chart - Income vs Expenses comparison
                    // This helps identify spending patterns and income trends
                    if (document.getElementById('cashFlowChart_@currency')) {
                        const cashFlowCtx = document.getElementById('cashFlowChart_@currency').getContext('2d');
                        new Chart(cashFlowCtx, {
                            type: 'bar',
                            data: {
                                labels: [@Html.Raw(string.Join(",", analysis.MonthlyAnalyses.Select(m => $"'{m.MonthName}'")))],
                                datasets: [{
                                    label: 'Income',
                                    data: [@Html.Raw(string.Join(",", analysis.MonthlyAnalyses.Select(m => m.Income.ToString("F2"))))],
                                    backgroundColor: 'rgba(25, 135, 84, 0.8)',
                                    borderColor: 'rgb(25, 135, 84)',
                                    borderWidth: 1
                                }, {
                                    label: 'Expenses',
                                    data: [@Html.Raw(string.Join(",", analysis.MonthlyAnalyses.Select(m => m.Expenses.ToString("F2"))))],
                                    backgroundColor: 'rgba(220, 53, 69, 0.8)',
                                    borderColor: 'rgb(220, 53, 69)',
                                    borderWidth: 1
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                scales: {
                                    y: {
                                        beginAtZero: true,
                                        grid: {
                                            color: 'rgba(0,0,0,0.1)'
                                        },
                                        ticks: {
                                            callback: function(value) {
                                                return new Intl.NumberFormat('en-US', {
                                                    style: 'currency',
                                                    currency: '@currency'
                                                }).format(value);
                                            }
                                        }
                                    },
                                    x: {
                                        grid: {
                                            display: false
                                        }
                                    }
                                }
                            }
                        });
                    }

                    // Transaction Types Distribution - Shows transaction pattern breakdown
                    // Helps understand what types of transactions are most common
                    if (document.getElementById('transactionTypesChart_@currency')) {
                        const typeCtx = document.getElementById('transactionTypesChart_@currency').getContext('2d');
                        new Chart(typeCtx, {
                            type: 'doughnut',
                            data: {
                                labels: [@Html.Raw(string.Join(",", analysis.TransactionTypeAnalyses.Select(t => $"'{t.TransactionType.Replace("_", " ")}'")))],
                                datasets: [{
                                    data: [@Html.Raw(string.Join(",", analysis.TransactionTypeAnalyses.Select(t => t.Count.ToString())))],
                                    backgroundColor: [
                                        'rgba(13, 110, 253, 0.8)',
                                        'rgba(25, 135, 84, 0.8)',
                                        'rgba(255, 193, 7, 0.8)',
                                        'rgba(220, 53, 69, 0.8)',
                                        'rgba(111, 66, 193, 0.8)',
                                        'rgba(13, 202, 240, 0.8)'
                                    ],
                                    borderWidth: 2,
                                    borderColor: 'white'
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: {
                                    legend: {
                                        position: 'bottom',
                                        labels: {
                                            padding: 20,
                                            usePointStyle: true
                                        }
                                    }
                                }
                            }
                        });
                    }

                    // Yearly Analysis Chart - Long-term trend visualization
                    // Essential for understanding annual financial performance
                    if (document.getElementById('yearlyChart_@currency')) {
                        const yearlyCtx = document.getElementById('yearlyChart_@currency').getContext('2d');
                        new Chart(yearlyCtx, {
                            type: 'bar',
                            data: {
                                labels: [@Html.Raw(string.Join(",", analysis.YearlyAnalyses.Select(y => y.Year.ToString())))],
                                datasets: [{
                                    label: 'Net Income',
                                    data: [@Html.Raw(string.Join(",", analysis.YearlyAnalyses.Select(y => y.NetIncome.ToString("F2"))))],
                                    backgroundColor: function(context) {
                                        const value = context.parsed.y;
                                        return value >= 0 ? 'rgba(25, 135, 84, 0.8)' : 'rgba(220, 53, 69, 0.8)';
                                    },
                                    borderColor: function(context) {
                                        const value = context.parsed.y;
                                        return value >= 0 ? 'rgb(25, 135, 84)' : 'rgb(220, 53, 69)';
                                    },
                                    borderWidth: 1
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                scales: {
                                    y: {
                                        beginAtZero: true,
                                        grid: {
                                            color: 'rgba(0,0,0,0.1)'
                                        },
                                        ticks: {
                                            callback: function(value) {
                                                return new Intl.NumberFormat('en-US', {
                                                    style: 'currency',
                                                    currency: '@currency'
                                                }).format(value);
                                            }
                                        }
                                    },
                                    x: {
                                        grid: {
                                            display: false
                                        }
                                    }
                                }
                            }
                        });
                    }
                    </text>
        }
    });
</script>

<style>
    /* Modern, clean styling for the analysis dashboard */
    body {
        background-color: #f8f9fa;
        font-family: system-ui, -apple-system, "Segoe UI", Roboto, sans-serif;
    }

    .stat-card, .metric-card, .chart-card, .table-card {
        border-radius: 16px;
        transition: all 0.3s ease;
    }

        .stat-card:hover, .metric-card:hover, .chart-card:hover, .table-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 12px 24px rgba(0,0,0,0.15) !important;
        }

    .chart-card {
        min-height: 400px;
    }

    .card-header {
        border-radius: 16px 16px 0 0 !important;
    }

    .table th {
        border-top: none;
        font-weight: 600;
        color: #495057;
        font-size: 0.875rem;
    }

    .table td {
        vertical-align: middle;
        border-color: #f8f9fa;
    }

    .badge {
        font-size: 0.75rem;
        padding: 0.5em 0.75em;
    }

    .badge-sm {
        font-size: 0.7rem;
        padding: 0.25em 0.5em;
    }

    .currency-section {
        background: white;
        border-radius: 20px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 4px 16px rgba(0,0,0,0.1);
    }

    .display-4 {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    canvas {
        max-height: 300px;
    }

    .text-gold {
        color: #ffc107 !important;
    }

    /* Enhanced styling for new sections */
    .border-end:last-child {
        border-right: none !important;
    }

    .border-bottom:last-child {
        border-bottom: none !important;
    }

    /* Responsive adjustments for transaction details */
    @@media (max-width: 991.98px) {
        .border-end

    {
        border-right: none !important;
        border-bottom: 1px solid #dee2e6 !important;
    }

    }
</style>